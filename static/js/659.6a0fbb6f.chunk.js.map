{"version":3,"file":"static/js/659.6a0fbb6f.chunk.js","mappings":"+NAEaA,EAAYC,EAAAA,EAAAA,IAAH,uKASTC,EAAQD,EAAAA,EAAAA,GAAH,4IAQWA,EAAAA,EAAAA,GAAH,kHAOCA,EAAAA,EAAAA,EAAH,yF,yGC1BXE,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACnBC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,SAASG,MAAnB,EACjBC,EAAgB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,E,mBCArBC,EAAWV,EAAAA,EAAAA,GAAH,0DCARW,EAAUX,EAAAA,EAAAA,GAAH,4IAQPD,EAAYC,EAAAA,EAAAA,IAAH,+FAMTY,EAAcZ,EAAAA,EAAAA,KAAH,yHAOXa,EAAgBb,EAAAA,EAAAA,KAAH,8F,8BCrBbc,EAAcd,EAAAA,EAAAA,OAAH,0M,+DCgCxB,EA9BqB,SAAC,GAOf,IANHe,EAME,EANFA,KAME,IALFC,WAAAA,OAKE,MALW,KAKX,MAJFC,MAAAA,OAIE,MAJM,KAIN,MAHFC,QAAAA,OAGE,MAHQ,kBAAM,IAAN,EAGR,MAFFC,SAAAA,OAEE,MAFS,KAET,EADCC,GACD,YACF,OACI,SAACN,GAAD,gBACIE,WAAYA,EACZC,MAAOA,EACPF,KAAMA,EACNG,QAASA,GACLE,GALR,aAOKD,IAGZ,EChBc,SAASE,EAAT,GAA6D,IAAD,IAAjCC,QAAWC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OACrDC,GAAWC,EAAAA,EAAAA,MACXlB,GAAYmB,EAAAA,EAAAA,IAAYpB,GAE9B,OACI,UAACG,EAAD,YACI,iCACI,SAACZ,EAAD,WACI,SAACa,EAAD,UAAcY,MAErBf,GAEO,SAACI,EAAD,kCAEA,SAACd,EAAD,WACI,SAACc,EAAD,UAAgBY,UAI5B,SAAC,EAAD,CACIV,KAAK,SACL,aAAW,iBACXG,QAAS,kBAAMQ,EAASG,EAAAA,GAAiC,CAACN,GAAAA,EAAIC,KAAAA,IAArD,EAHb,sBASX,CC7Bc,SAASM,IACpB,IAAMzB,GAAQuB,EAAAA,EAAAA,IAAYG,GACpBxB,GAASqB,EAAAA,EAAAA,IAAYG,GAOrBC,EALsB,WACxB,IAAMC,EAAgB1B,EAAO2B,oBAC7B,OAAO7B,EAAME,QAAO,SAAA4B,GAAI,OAAIA,EAAKX,KAAKU,oBAAoBE,SAASH,EAA3C,GAC3B,CAEwBI,GAEzB,OACI,SAAC3B,EAAD,UACKsB,EAAiBM,OAAS,EACvBN,EAAiBO,KAAI,SAAAjB,GAAO,OACxB,SAACD,EAAD,CAAkCC,QAASA,GAArBA,EAAQC,GADN,KAIxB,gBAAKiB,MAAO,CAACvB,MAAO,MAAMwB,SAAU,QAApC,6BAMnB,C,8BC5BYC,EAAe1C,EAAAA,EAAAA,QAAH,yEAKZC,EAAQD,EAAAA,EAAAA,GAAH,+FCWlB,EAdgB,SAAC,GAAyB,IAAvB2C,EAAsB,EAAtBA,MAAOxB,EAAe,EAAfA,SACtB,OACI,UAACuB,EAAD,YACI,SAACzC,EAAD,UAAQ0C,IACPxB,IAGZ,E,UCRYyB,EAAQ5C,EAAAA,EAAAA,MAAH,gEAKL6C,GAAQ7C,EAAAA,EAAAA,GAAO8C,EAAAA,GAAP9C,CAAH,6JASL+C,EAAY/C,EAAAA,EAAAA,IAAH,2J,oBC4DtB,EAlE2B,WACvB,IAAM0B,GAAWC,EAAAA,EAAAA,MACXvB,GAAWwB,EAAAA,EAAAA,IAAYG,GAoBvBiB,EAAY,SAAAC,GACd,IAAMC,EAAcD,EAAQf,oBAC5B,OAAO9B,EAAS+C,MAAK,qBAAG3B,KAAgBU,sBAAwBgB,CAA3C,GACxB,EAED,OACI,0BACI,SAAC,KAAD,CAAQE,cAzBM,CAClB5B,KAAM,GACNC,OAAQ,IAuBkC4B,SApBzB,SAACjD,EAAD,GAA8B,IAAjBkD,EAAgB,EAAhBA,UACtB9B,EAASpB,EAAToB,KACQwB,EAAUxB,GAGtB+B,EAAAA,GAAAA,MAAA,UAAe/B,EAAf,0BAGJE,EAASG,EAAAA,GAA8BzB,IACvCmD,EAAAA,GAAAA,QAAA,UAAiBnD,EAASoB,KAA1B,uBACA8B,IACH,EASO,UACA,UAAC,KAAD,CAAME,aAAa,MAAnB,WACI,SAACT,EAAD,WACI,UAACH,EAAD,CAAOa,QAAQ,OAAf,mBAEA,SAACZ,EAAD,CACI9B,KAAK,OACLS,KAAK,OACLkC,QAAQ,yHACRf,MAAM,yIACNgB,UAAQ,KAER,SAAC,KAAD,CAAcnC,KAAK,OAAOoC,UAAU,cAI5C,UAACb,EAAD,YACI,UAACH,EAAD,CAAOa,QAAQ,SAAf,qBAEA,SAACZ,EAAD,CACI9B,KAAK,MACLS,KAAK,SACLkC,QAAQ,yFACRf,MAAM,+FACNgB,UAAQ,QAGZ,SAAC,KAAD,CAAcnC,KAAK,SAASoC,UAAU,YAGtC,SAACC,EAAA,EAAD,CAAQ9C,KAAM,SAAU4B,MAAO,sBAKlD,ECzEYE,EAAQ7C,EAAAA,EAAAA,MAAH,yIAQL8D,EAAgB9D,EAAAA,EAAAA,IAAH,0HAOb4C,EAAQ5C,EAAAA,EAAAA,MAAH,8C,UCgBlB,EA1Be,WACX,IAAM0B,GAAWC,EAAAA,EAAAA,MACXpB,GAASqB,EAAAA,EAAAA,IAAYG,GAI3B,OACI,iCACI,SAAC,EAAD,CAAO0B,QAAQ,SAAf,2BACA,UAACK,EAAD,YACI,SAAC,EAAD,CAAO/C,KAAK,OAAOS,KAAK,SAASuC,MAAOxD,EAAQyD,SAN3C,SAAAC,GAAC,OAAIvC,GAASwC,EAAAA,EAAAA,IAAUD,EAAEE,OAAOJ,OAAhC,IAOLxD,IACG,SAAC,EAAD,CACIU,MAAM,QACNF,KAAK,SACL,aAAW,eACXG,QAAS,kBAAMQ,GAAS0C,EAAAA,EAAAA,MAAf,EAJb,wBAYnB,ECrBc,SAAS1D,KACtB,IAAMgB,GAAWC,EAAAA,EAAAA,MACXtB,GAAQuB,EAAAA,EAAAA,IAAY1B,GACpBO,GAAYmB,EAAAA,EAAAA,IAAYpB,GAM9B,OAJA6D,EAAAA,EAAAA,YAAU,WACR3C,GAAS4C,EAAAA,EAAAA,MACV,GAAE,CAAC5C,KAGF,UAAC,KAAD,YACE,SAAC,EAAD,WACE,SAAC,EAAD,OAEF,UAAC,EAAD,CAASiB,MAAM,WAAf,UACGlC,IAAa,yCACZA,GAA8B,IAAjBJ,EAAMiC,SACnB,gBAAKE,MAAO,CAAEvB,MAAO,MAAOwB,SAAU,QAAtC,yBAEDpC,EAAMiC,OAAS,IACd,iCACE,SAAC,EAAD,KACA,SAACR,EAAD,YAMX,C","sources":["components/App/App.styled.jsx","redux/contacts/selectors.js","components/Contacts/ContactList.styled.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/DeleteButton/DeleteButton.styled.jsx","components/DeleteButton/DeleteButton.jsx","components/ContactListItem/ContactListItem.jsx","components/Contacts/ContactList.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\n    margin: 0 auto;\n    padding: 24px;\n    width: 600px;\n    text-align: center;\n    border: 2px solid #2a2a2a;\n    border-radius: 16px;\n`;\n\nexport const Title = styled.h1`\n    text-align: center;\n    margin-top: 8px;\n    padding: 8px;\n    font-weight: bold;    \n    font-size: 24px;\n`;\n\nexport const ContactsTitle = styled.h2`\n    display: block;\n    padding-top: 20px;\n    margin: 0 0 20px;\n    font-size: 24px;\n`;\n\nexport const FilterTitle = styled.p`\n    display: block;\n    margin: 0 0 20px;\n    font-size: 16px;\n`;","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoadStatus = state => state.contacts.isLoading;\n","import styled from \"@emotion/styled\";\n\nexport const Contacts = styled.ul`\n    margin: 40px 16px 40px 16px;\n`","import styled from \"@emotion/styled\";\n\nexport const Contact = styled.li`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 12px;\n    width: 90%;\n`;\n\nexport const Container = styled.div`\n    margin-right: 24px;\n    display: flex;\n    align-items: center;\n`;\n\nexport const ContactName = styled.span`\n    flex-grow: 1;\n    text-transform: capitalize;\n    font-size: 18px;\n    margin-left: 8px;\n`;\n\nexport const ContactNumber = styled.span`\n    margin-right: 80px;\n    margin-left: 8px;\n    font-size: 18px;\n`;","import styled from \"@emotion/styled\";\n\nexport const ButtonStyle = styled.button`\n    margin-left: 10px;\n    border: none;\n    border-radius: 4px;\n    outline: none;\n    padding: 10px;\n    background-color: #fff;\n    color: black;\n    cursor: pointer;\n`;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { ButtonStyle } from \"./DeleteButton.styled\";\n\nconst DeleteButton = ({\n    type,\n    background = null,\n    color = null,\n    onClick = () => null,\n    children = null,\n    ...allyProps\n}) => {\n    return (\n        <ButtonStyle\n            background={background}\n            color={color}\n            type={type}\n            onClick={onClick}\n            {...allyProps}\n        >\n            {children}\n        </ButtonStyle>\n    );\n};\n\nDeleteButton.propTypes = {\n    type: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    background: PropTypes.string,\n    color: PropTypes.string,\n    children: PropTypes.node.isRequired,\n    'aria-label': PropTypes.string.isRequired,\n};\n\nexport default DeleteButton;","import { useDispatch, useSelector } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport { Contact, Container, ContactNumber, ContactName } from \"./ContactListItem.styled\";\nimport * as contactsOperations from 'redux/contacts/operations';\nimport DeleteButton from 'components/DeleteButton';\nimport { getLoadStatus } from \"redux/contacts/selectors\";\n\nexport default function ContactListItem({ contact: { id, name, number } }) {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(getLoadStatus);\n\n    return (\n        <Contact>\n            <>\n                <Container>\n                    <ContactName>{name}</ContactName>\n                </Container>\n            {isLoading ?\n                (\n                    <ContactNumber>removal process...</ContactNumber>\n                ) : (\n                    <Container>\n                        <ContactNumber>{number}</ContactNumber>\n                    </Container>\n                )}\n            </>\n            <DeleteButton\n                type=\"button\"\n                aria-label=\"delete contact\"\n                onClick={() => dispatch(contactsOperations.deleteContact({id, name}))}\n            >\n                Delete\n            </DeleteButton>\n        </Contact>\n    );\n};\n\nContactListItem.propTypes = {\n    contact: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    }).isRequired,\n};","import { useSelector } from \"react-redux\";\nimport * as selectors from \"redux/contacts/selectors\";\nimport { Contacts } from \"./ContactList.styled\";\nimport ContactListItem from 'components/ContactListItem';\n\n\nexport default function ContactList() {\n    const items = useSelector(selectors.getContacts);\n    const filter = useSelector(selectors.getFilter);\n\n    const getFilteredContacts = () => {\n        const toLowerFilter = filter.toLocaleLowerCase();\n        return items.filter(item => item.name.toLocaleLowerCase().includes(toLowerFilter));\n    };\n\n    const filteredContacts = getFilteredContacts();\n\n    return (\n        <Contacts>\n            {filteredContacts.length > 0 ? (\n                filteredContacts.map(contact => (\n                    <ContactListItem key={contact.id} contact={contact}/>\n                ))\n            ) : (\n                    <div style={{color: 'red',fontSize: '20px'}}>\n                        no match found\n                    </div>\n            )}\n        </Contacts>\n    );\n}","import styled from \"@emotion/styled\";\n\nexport const SectionStyle = styled.section`\n    margin-left: auto;\n    margin-right: auto;\n`;\n\nexport const Title = styled.h2`\n    font-size: 24px;\n    margin-top: 20px;\n    margin-bottom: 20px;\n`;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { SectionStyle, Title } from \"./Section.styled\";\n\nconst Section = ({ title, children }) => {\n    return (\n        <SectionStyle>\n            <Title>{title}</Title>\n            {children}\n        </SectionStyle>\n    );\n};\n\nSection.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.node.isRequired,\n};\n\nexport default Section;","import styled from \"@emotion/styled\";\nimport { Field } from \"formik\";\n\nexport const Label = styled.label`\n    margin: 8px;\n    font-size: 20px;\n`;\n\nexport const Input = styled(Field)`\n    margin: 4px;\n    padding: 8px;\n    width: 200px;\n    outline: none;\n    border: 1px solid #e986b1;\n    border-radius: 4px;\n`;\n\nexport const FormField = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n    flex-direction: column;\n    margin-right: 30%;\n`;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport {\n    FormField, Input, Label\n} from './ContactForm.styled';\nimport Button from 'components/Button';\nimport * as selectors from 'redux/contacts/selectors';\nimport * as contactsOperations from 'redux/contacts/operations';\nimport { toast } from 'react-toastify';\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectors.getContacts);\n\n    const initialValues = {\n        name: '',\n        number: '',\n    };\n    \n    const handleSubmit = (contacts, { resetForm }) => {\n        const { name } = contacts;\n        const newName = checkName(name);\n\n        if (newName) {\n            toast.error(`${name} already in contacts`);\n            return;\n        }\n        dispatch(contactsOperations.addContact(contacts));\n        toast.success(`${contacts.name} added to contacts`);\n        resetForm();\n    };\n\n    const checkName = newName => {\n        const toLowerName = newName.toLocaleLowerCase();\n        return contacts.find(({ name }) => name.toLocaleLowerCase() === toLowerName);\n    };\n\n    return (\n        <div>\n            <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n            <Form autoComplete='off'>\n                <FormField>\n                    <Label htmlFor='name'>\n                    Name:\n                    <Input\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                            />\n                        <ErrorMessage name='name' component=\"div\" />\n                    </Label>\n                </FormField>\n                    \n                <FormField>\n                    <Label htmlFor='number'>\n                    Number:\n                    <Input\n                        type=\"tel\"\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                    />\n                    </Label>\n                    <ErrorMessage name='number' component=\"div\" />        \n                </FormField>\n                    \n                    <Button type={'submit'} title={'Add contact'} />\n            </Form>\n        </Formik>\n        </div>\n    ); \n}\n\nexport default ContactForm;\n","import styled from \"@emotion/styled\";\n\nexport const Input = styled.input`\n    padding: 8px;\n    outline: none;\n    width: 70%;\n    border: 1px solid #e986b1;\n    border-radius: 4px;\n`;\n\nexport const FilterWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 10px 0;\n`;\n\nexport const Label = styled.label`\n    font-size: 20px;\n`","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DeleteButton from \"components/DeleteButton\";\nimport { Input, FilterWrapper, Label } from \"./Filter.styled\";\nimport * as selectors from \"redux/contacts/selectors\";\nimport { setFilter, resetFilter } from \"redux/contacts/filterSlice\";\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(selectors.getFilter);\n\n    const onChange = e => dispatch(setFilter(e.target.value));\n\n    return (\n        <>\n            <Label htmlFor=\"filter\">Find contact</Label>\n            <FilterWrapper>\n                <Input type=\"text\" name=\"filter\" value={filter} onChange={onChange} />\n                {filter && (\n                    <DeleteButton\n                        color=\"black\"\n                        type=\"button\"\n                        aria-label=\"Clear filter\"\n                        onClick={() => dispatch(resetFilter())}\n                    >\n                        Clear\n                    </DeleteButton>\n                )}\n            </FilterWrapper>\n        </>\n    );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactList from 'components/Contacts/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getContacts, getLoadStatus } from 'redux/contacts/selectors';\nimport { Container } from 'components/App/App.styled';\nimport Section from 'components/Section';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const items = useSelector(getContacts);\n  const isLoading = useSelector(getLoadStatus);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Section>\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        {isLoading && <div>Loading...</div>}\n        {!isLoading && items.length === 0 && (\n          <div style={{ color: 'red', fontSize: '20px' }}>no contacts</div>\n        )}\n        {items.length > 0 && (\n          <>\n            <Filter />\n            <ContactList />\n          </>\n        )}\n      </Section>\n    </Container>\n  );\n}\n"],"names":["Container","styled","Title","getContacts","state","contacts","items","getFilter","filter","getLoadStatus","isLoading","Contacts","Contact","ContactName","ContactNumber","ButtonStyle","type","background","color","onClick","children","allyProps","ContactListItem","contact","id","name","number","dispatch","useDispatch","useSelector","contactsOperations","ContactList","selectors","filteredContacts","toLowerFilter","toLocaleLowerCase","item","includes","getFilteredContacts","length","map","style","fontSize","SectionStyle","title","Label","Input","Field","FormField","checkName","newName","toLowerName","find","initialValues","onSubmit","resetForm","toast","autoComplete","htmlFor","pattern","required","component","Button","FilterWrapper","value","onChange","e","setFilter","target","resetFilter","useEffect","fetchContacts"],"sourceRoot":""}